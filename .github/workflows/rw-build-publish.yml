name: Build and Publish Reusable Workflow
on:
  workflow_call:
    inputs:
      os:
        description: "Operating system to build on"
        required: false
        type: string
        default: "ubuntu-latest"
      python-version:
        description: "Python version to use in the build process"
        required: true
        type: string
      changelog-file:
        description: "Changelog file to extract release notes from"
        required: true
        type: string

jobs:
  is-release-check:
    runs-on: ubuntu-latest
    outputs:
      publish: ${{ steps.set-outputs.outputs.new_release }}
      is_pre_release: ${{ steps.set-outputs.outputs.is_pre_release }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
        shell: bash
      - name: Install scripts dependencies
        run: |
          make install-scripts
        shell: bash

      - name: Extract release version
        id: get-version
        run: |
          echo "VERSION=$(python scripts/gh_actions/extract_release_version.py -f dataguard/__init__.py)" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        uses: mukunku/tag-exists-action@v1.6.0
        id: tag-exists
        with:
          tag: ${{ steps.get-version.outputs.version }}

      - name: Check if Pypi version exists
        id: pypi-version-exists
        env:
          VERSION: ${{ steps.get-version.outputs.version }}
        run: |
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://pypi.org/pypi/datasentinel/${VERSION}/json")

          if [ "$HTTP_STATUS" == "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Set outputs
        id: set-outputs
        env:
          VERSION: ${{ steps.get-version.outputs.version }}
          TAG_EXISTS: ${{ steps.tag-exists.outputs.exists }}
          PYPI_VERSION_EXISTS: ${{ steps.pypi-version-exists.outputs.exists }}
        run: |
          if [ $TAG_EXISTS == 'true' || $PYPI_VERSION_EXISTS == 'true' ]; then
            # If tag exists or pypi version exists, set both outputs to false
            echo "new_release=false" >> $GITHUB_OUTPUT
            echo "is_pre_release=false" >> $GITHUB_OUTPUT
          else
            # Check if version contains pre-release indicators
            if [[ $VERSION =~ .*(a|alpha|b|beta|rc|c)[0-9]+ ]]; then
              # Pre-release version
              echo "new_release=true" >> $GITHUB_OUTPUT
              echo "is_pre_release=true" >> $GITHUB_OUTPUT
            else
              # Standard release version
              echo "new_release=true" >> $GITHUB_OUTPUT
              echo "is_pre_release=false" >> $GITHUB_OUTPUT
            fi
          fi

  build-and-publish:
    needs: is-release-check
    if: |
      needs.is-release-check.outputs.publish == 'true'
    runs-on: ${{ inputs.os }}
    env:
      RELEASE_NOTES_FILE: release_notes.md
    environment:
      name: pypi
      url: https://pypi.org/project/datasentinel
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
        shell: bash

      - name: Install scripts dependencies
        run: |
          make install-scripts
        shell: bash

      - name: Build project
        run: |
          make build
        shell: bash

      - name: Extract release notes
        run: |
          python scripts/gh_actions/extract_release_notes.py \
          -f ${{ inputs.changelog-file }} \
          -o $RELEASE_NOTES_FILE -v ${{ needs.is-release-check.outputs.version }}
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.version }}
          name: ${{ inputs.version }}
          body_path: ${{ env.RELEASE_NOTES_FILE }}
          draft: false
          prerelease: ${{ needs.is-release-check.outputs.is_pre_release }}

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: dist/
