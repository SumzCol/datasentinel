[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "datasentinel"
description = "DataSentinel is a powerful tool to monitor data pipelines and ensure data quality."
authors = [
    { name = "Sumz SAS" },
]
requires-python = ">=3.10"
license = {text = "Apache Software License (Apache 2.0)"}
keywords = [
    "data quality",
    "data engineering",
    "monitoring",
    "data validation",
    "data pipelines",
    "pipelines",
    "audit logging",
]
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
  "python-ulid~=2.7.0",
  "pydantic~=2.10",
]

dynamic = ["version", "readme"]

[project.urls]
"Homepage" = "https://github.com/SumzCol/datasentinel"
"Bug Tracker" = "https://github.com/SumzCol/datasentinel"

[tool.setuptools.dynamic]
version = {attr = "datasentinel.__version__"}
readme = {file = "README.md", content-type = "text/markdown"}

[project.optional-dependencies]
# Base dependencies
pyspark-base = [
  "pyspark>=3.4.0, <4.0"
]
deltatable-base = [
  "delta-spark>=3.1.0, <4.0"
]
pandas-base = [
  "pandas>=1.3, <3.0"
]

# Checks dependencies
pandas-cualleecheck = [
  "cuallee[pandas]~=0.15.2"
]
pyspark-cualleecheck = [
  "cuallee[pyspark]~=0.15.2",
]
cualleecheck = [
  "datasentinel[pyspark-cualleecheck,pandas-cualleecheck]"
]
pandas-rowlevelresultcheck = [
  "datasentinel[pandas-base]",
]
pyspark-rowlevelresultcheck = [
  "datasentinel[pyspark-base]",
]
rowlevelresultcheck = [
  "datasentinel[pyspark-rowlevelresultcheck,pandas-rowlevelresultcheck]"
]
pandas-checks = [
  "datasentinel[pandas-cualleecheck,pandas-rowlevelresultcheck]",
]
pyspark-checks = [
  "datasentinel[pyspark-cualleecheck,pyspark-rowlevelresultcheck]",
]
all-checks = [
  "datasentinel[pandas-checks,pyspark-checks]"
]

# Result stores dependencies
spark-deltatableresultstore = [
  "datasentinel[pyspark-base,deltatable-base]",
]
all-resultstores = [
  "datasentinel[spark-deltatableresultstore]"
]

# Audit stores dependencies
database-databaseauditstore = [
  "SQLAlchemy>=1.4, <3.0",
]
spark-deltatableauditstore = [
  "datasentinel[pyspark-base,deltatable-base]",
]
all-auditstores = [
  "datasentinel[database-databaseauditstore,spark-deltatableauditstore]"
]

# Notifiers dependencies
slack-slacknotifier = [
  "slack-sdk~=3.34.0"
]
all-notifiers = [
  "datasentinel[slack-slacknotifier]"
]

# Renderers dependencies
email-templateemailmessagerenderer = [
  "openpyxl==3.1.5",
  "Jinja2==3.1.5",
]
all-renderers = [
  "datasentinel[email-templateemailmessagerenderer]"
]

# Testing dependencies
test = [
  "pytest>=7.2,<9.0",
  "pytest-cov>=3,<7",
  "pendulum >= 2.1.2",
  "coverage[toml]",
  "datasentinel[all-checks,all-resultstores,all-auditstores,all-notifiers,all-renderers]",
]

# Scripts dependencies
scripts = [
    "click==8.1.0"
]

# Lint dependencies
lint = [
  "ruff==0.11.12",
  "pre-commit>=2.9.2, <5.0",
  "pyright==1.1.403",
]

all = [
  "datasentinel[test,scripts,lint]"
]

[tool.setuptools.package-data]
"datasentinel.notification.renderer.email.templates" = ["templates/*.html"]

[tool.pyright]
include = ['datasentinel']
exclude = [
    "**/node_modules",
    "**/__pycache__",
    ".git",
    ".ruff_cache",
    "^docs/"
]
typeCheckingMode = "off"
useLibraryCodeForTypes = true
reportMissingImports = "none"
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportPrivateUsage = true
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOptionalSubscript = false
reportOptionalMemberAccess = false
reportOptionalCall = false
reportOptionalIterable = false
reportOptionalContextManager = false
reportOptionalOperand = false
reportNoneNameAccess = false
pythonVersion = "3.10"
pythonPlatform = "All"

[tool.pytest.ini_options]
addopts="""
--cov-context test  \
--cov-config pyproject.toml \
--cov-report xml:coverage.xml \
--cov-report term-missing \
--cov datasentinel \
--cov tests \
--no-cov-on-fail \
-ra \
-W ignore"""
markers = [
    "unit: marker for unit tests",
    "functional: marker for functional tests",
    "slow: marker for slow tests",
    "pandas: marker for pandas dependent tests",
    "pyspark: marker for pyspark dependent tests",
    "session: marker for session tests",
    "runners: marker for runners tests",
    "checks: marker for checks tests",
    "result_store: marker for result stores tests",
    "audit_store: marker for audit stores tests",
    "notifier: marker for notifiers tests",
    "renderer: marker for renderers tests",
]
testpaths = [
  "tests"
]

[tool.coverage.report]
fail_under = 90
show_missing = true
omit = [
    "tests/*",
]
exclude_also = ["raise NotImplementedError", "if TYPE_CHECKING:", "__all__"]

[tool.coverage.run]
concurrency = ["multiprocessing", "thread"]
parallel = true
sigterm = true
